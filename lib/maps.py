def parse_address(json) -> list:
    """
    Function that parses the Gogle maps API json output 
    
    @param json: Google's reverse lookup json object
    @returns: a list with address, zipcode, neighborhood, and locality (Google defined)
    """
    result = get_first(json['results'])
    address = result['formatted_address']
    zipcode, neighborhood, locality = (None, None, None)
    for entry in result['address_components']:
        if entry['types'][0] == 'postal_code':
            zipcode = entry['long_name']
        elif entry['types'][0] == 'neighborhood':
            neighborhood = entry['long_name']
        elif entry['types'][0] == 'locality':
            locality = entry['long_name']
    return([address, zipcode, neighborhood, locality])

def reverse_lookup(key: str, lat: str, long: str) -> list:
    """
    Funcion that uses Google's reverse lookup API to turn latitude and longitude into a street address

    @param lat: latitude
    @param long: longitude
    @returns: Google's reverse lookup json object
    """
    # Google's reverse lookup API
    url='https://maps.googleapis.com/maps/api/geocode/json?latlng='
    r = requests.get(url + lat + ',' + long + "&key=" + api_key)
    json = r.json()
    # parse output
    address = parse_address(json)
    return(address)

def check_new(url_dict: dict) -> new:
    """
    Function that filters list of all URLs to only new URLs
    
    @param url_dict: a dict of URLs to be checked against URLs already scraped, generated by extract_links()
    @returns: filtered list of only new URLs
    """
    # create searchable database of existing post ID .txt files
    database = [x.replace('.txt', '') for x in os.listdir(outdir)]
    # for ids not in database, return url
    new = [url_dict[key] for key, value in url_dict.items() if key not in database]
    return(new)
